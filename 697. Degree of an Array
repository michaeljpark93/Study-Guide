# Given a non-empty array of non-negative integers nums, the degree of this array is defined as the maximum frequency of any one of its elements.

# Your task is to find the smallest possible length of a (contiguous) subarray of nums, that has the same degree as nums.

# Example 1:
# Input: [1, 2, 2, 3, 1]
# Output: 2
# Explanation: 
# The input array has a degree of 2 because both elements 1 and 2 appear twice.
# Of the subarrays that have the same degree:
# [1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]
# The shortest length is 2. So return 2.
# Example 2:
# Input: [1,2,2,3,1,4,2]
# Output: 6
# Note:

# nums.length will be between 1 and 50,000.
# nums[i] will be an integer between 0 and 49,999.

# @param {Integer[]} nums
# @return {Integer}
def find_shortest_sub_array(nums)
    return 1 if nums.length < 2
        
    freq = Hash.new(0)
    nums.each { |num| freq[num] += 1 }
    
    max_freq = freq.values.max
    targets = freq.select { |k, v| v == max_freq }
    degrees = nums.length
    targets.each do |k, v|
        start = nums.index(k)
        last = nums.rindex(k)
        print start, last
        degrees = [last - start + 1, degrees].min
    end
    
    degrees
end

# Time: O(N), Space: O(N)