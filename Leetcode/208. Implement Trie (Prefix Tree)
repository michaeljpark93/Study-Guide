// Implement a trie with insert, search, and startsWith methods.

// Example:
// Trie trie = new Trie();
// trie.insert("apple");
// trie.search("apple");   // returns true
// trie.search("app");     // returns false
// trie.startsWith("app"); // returns true
// trie.insert("app");
// trie.search("app");     // returns true

// Note:
// You may assume that all inputs are consist of lowercase letters a-z.
// All inputs are guaranteed to be non-empty strings.

/**
 * Initialize your data structure here.
 */
const trieNode = function (word) {
  this.word = word;
  this.children = {};
  this.isWord = false;
};
const Trie = function () {
  this.root = new trieNode('');
};

/**
 * Inserts a word into the trie.
 * @param {string} word
 * @return {void}
 */
Trie.prototype.insert = function (word) {
  let currNode = this.root;
  for (let i = 0; i < word.length; i += 1) {
    if (!currNode.children[word[i]]) {
      currNode.children[word[i]] = new trieNode(word[i]);
    }
    currNode = currNode.children[word[i]];
  }
  currNode.isWord = true;
};

/**
 * Returns if the word is in the trie.
 * @param {string} word
 * @return {boolean}
 */
Trie.prototype.search = function (word) {
  let currNode = this.root;
  for (const ch of word) {
    if (!currNode.children[ch]) return false;
    currNode = currNode.children[ch];
  }
  return currNode.isWord;
};

/**
 * Returns if there is any word in the trie that starts with the given prefix.
 * @param {string} prefix
 * @return {boolean}
 */
Trie.prototype.startsWith = function (prefix) {
  let currNode = this.root;
  for (const ch of prefix) {
    if (!currNode.children[ch]) return false;
    currNode = currNode.children[ch];
  }
  return true;
};

/**
 * Your Trie object will be instantiated and called as such:
 * var obj = Object.create(Trie).createNew()
 * obj.insert(word)
 * var param_2 = obj.search(word)
 * var param_3 = obj.startsWith(prefix)
 */
