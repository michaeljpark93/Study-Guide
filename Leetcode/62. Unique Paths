// A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).
// The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).
// How many possible unique paths are there?

// Note: m and n will be at most 100.

// Example 1:
// Input: m = 3, n = 2
// Output: 3
// Explanation:
// From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:
// 1. Right -> Right -> Down
// 2. Right -> Down -> Right
// 3. Down -> Right -> Right

// Example 2:
// Input: m = 7, n = 3
// Output: 28

/**
 * @param {number} m
 * @param {number} n
 * @return {number}
 */
const uniquePaths = function (m, n) {
  const paths = new Array(n);
  for (let i = 0; i < n; i += 1) {
    paths[i] = new Array(m);
  }
  // base case of first row and first col only 1 way of reaching it
  paths[0].fill(1);
  for (let row = 1; row < n; row += 1) {
    paths[row][0] = 1;
  }

  for (let row = 1; row < n; row += 1) {
    for (let col = 1; col < m; col += 1) {
      const top = paths[row - 1][col];
      const left = paths[row][col - 1];
      paths[row][col] = top + left;
    }
  }

  return paths[n - 1][m - 1];
};
