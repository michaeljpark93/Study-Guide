// Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.
// A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.

// Example:
// Input: "23"
// Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].

// Note: Although the above answer is in lexicographical order, your answer could be in any order you want.

/**
 * @param {string} digits
 * @return {string[]}
 */
const letterCombinations = function (digits) {
  const dict = {
    2: 'abc',
    3: 'def',
    4: 'ghi',
    5: 'jkl',
    6: 'mno',
    7: 'pqrs',
    8: 'tuv',
    9: 'wxyz',
  };
  let result = [];
  if (!digits.length) return result;
  result = dict[digits[0]].split('');

  for (let i = 1; i < digits.length; i++) {
    const temp = [];
    for (let j = 0; j < result.length; j++) {
      dict[digits[i]].split('').map((str) => {
        temp.push(result[j] + str);
      });
    }
    result = temp;
  }

  return result;
};

# Python Solution:
class Solution:
    def letterCombinations(self, digits: str) -> List[str]:
        phone = {
            '2': 'abc',
            '3': 'def',
            '4': 'ghi',
            '5': 'jkl',
            '6': 'mno',
            '7': 'pqrs',
            '8': 'tuv',
            '9': 'wxyz',
        }
        
        if len(digits) == 0:
            return []
        if len(digits) == 1:
            return list(phone[digits[0]])
        prev = self.letterCombinations(digits[:-1])
        additional = list(phone[digits[-1]])
        return [s + c for s in prev for c in additional]