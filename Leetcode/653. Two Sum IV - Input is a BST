# Given a Binary Search Tree and a target number, return true if there exist two elements in the BST such that their sum is equal to the given target.

# Example 1:
# Input: 
#     5
#    / \
#   3   6
#  / \   \
# 2   4   7

# Target = 9

# Output: True

# Example 2:
# Input: 
#     5
#    / \
#   3   6
#  / \   \
# 2   4   7

# Target = 28

# Output: False

# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end

# @param {TreeNode} root
# @param {Integer} k
# @return {Boolean}
def find_target(root, k, r=root)
    return false if root.nil?
    target = k - root.val
    curr = (target == root.val) ? false : search(r, target)
    left = find_target(root.left, k, r)
    right = find_target(root.right, k, r)
    
    curr || left || right
end

def search(root, target)
    return false if root.nil?
    return true if root.val == target
    return search(root.left, target) if target < root.val
    return search(root.right, target) if target > root.val
    
    false
end