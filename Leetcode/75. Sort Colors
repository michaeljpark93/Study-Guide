# Given an array with n objects colored red, white or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white and blue.
# Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.
# Note: You are not suppose to use the library's sort function for this problem.

# Example:
# Input: [2,0,2,1,1,0]
# Output: [0,0,1,1,2,2]

# Follow up:
# A rather straight forward solution is a two-pass algorithm using counting sort.
# First, iterate the array counting number of 0's, 1's, and 2's, then overwrite array with total number of 0's, then 1's and followed by 2's.
# Could you come up with a one-pass algorithm using only constant space?

class Solution:
    def sortColors(self, nums: List[int]) -> None:
        # initialize indices of zero and two as counter variables
        zero, two, start = 0, len(nums) - 1, 0
        while start <= two:
            if nums[start] == 0:
                nums[zero], nums[start] = nums[start], nums[zero]
                zero += 1
                start += 1
            elif nums[start] == 2:
                nums[two], nums[start] = nums[start], nums[two]
                two -= 1
            else:
                start += 1


// JavaScript Solution:
var sortColors = function(nums) {
    if (nums.length < 2) return nums;
    let lo = 0;
    let hi = nums.length - 1;
    let idx = 0;
    while (idx <= hi) {
        const num = nums[idx]
        if (num === 0) {
            nums[idx] = nums[lo];
            nums[lo] = num;
            lo += 1;
            idx += 1;
        } else if (num === 2) {
            nums[idx] = nums[hi];
            nums[hi] = num;
            hi -= 1;
        } else {
            idx += 1;
        }
    }
    return nums
};