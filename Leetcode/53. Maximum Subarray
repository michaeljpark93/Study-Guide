// Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

// Example:
// Input: [-2,1,-3,4,-1,2,1,-5,4],
// Output: 6
// Explanation: [4,-1,2,1] has the largest sum = 6.

// Follow up:
// If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.

/**
 * @param {number[]} nums
 * @return {number}
 */
const maxSubArray = function (nums) {
  // Set maxVal int to first number and iterate through array and see if partial sum > maxVal (if partial sum < 0 then reset partial sum)
  let maxVal = nums[0];
  let currSum = nums[0];
  for (let i = 1; i < nums.length; i++) {
    if (currSum + nums[i] > 0) {
      currSum = Math.max(nums[i], currSum + nums[i]);
    } else {
      currSum = nums[i];
    }
    maxVal = Math.max(maxVal, currSum);
  }

  return maxVal;
};
