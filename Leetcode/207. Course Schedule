// There are a total of n courses you have to take, labeled from 0 to n - 1.
// Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0, 1]
// Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses ?

//   Example 1:
// Input: 2, [[1, 0]]
// Output: true
// Explanation: There are a total of 2 courses to take.
// To take course 1 you should have finished course 0. So it is possible.

//   Example 2:
// Input: 2, [[1, 0], [0, 1]]
// Output: false
// Explanation: There are a total of 2 courses to take.
// To take course 1 you should have finished course 0, and to take course 0 you should
// also have finished course 1. So it is impossible.

//   Note:
// The input prerequisites is a graph represented by a list of edges, not adjacency matrices.Read more about how a graph is represented.
// You may assume that there are no duplicate edges in the input prerequisites.

// /**
//  * @param {number} numCourses
//  * @param {number[][]} prerequisites
//  * @return {boolean}
//  */


class Course {
  constructor() {
    this.numPrerecs = 0;
    this.isPrerec = [];
    this.clear = false;
  }
}

const canFinish = function (numCourses, prerequisites) {
  const courses = [];
  for (let i = 0; i < numCourses; i += 1) {
    courses[i] = new Course();
  }

  prerequisites.forEach(([pre, course]) => {
    courses[pre].numPrerecs += 1;
    courses[course].isPrerec.push(pre);
  });

  let finished = 0;
  let prev = -1;
  while (finished > prev) {
    prev = finished;

    for (let i = 0; i < numCourses; i += 1) {
      if (courses[i].numPrerecs === 0 && !courses[i].clear) {
        courses[i].isPrerec.forEach((j) => {
          courses[j].numPrerecs -= 1;
        });
        courses[i].clear = true;
        finished += 1;
      }
    }
  }

  return finished === numCourses;
};
