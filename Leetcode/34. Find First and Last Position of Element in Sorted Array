# Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.
# Your algorithm's runtime complexity must be in the order of O(log n).
# If the target is not found in the array, return [-1, -1].

# Example 1:
# Input: nums = [5,7,7,8,8,10], target = 8
# Output: [3,4]

# Example 2:
# Input: nums = [5,7,7,8,8,10], target = 6
# Output: [-1,-1]

class Solution:
    def searchRange(self, nums: List[int], target: int) -> List[int]:
        n = len(nums)
        left, right = -1, -1
        if n == 0: return left, right
        l_idx, r_idx = 0, n - 1
        while l_idx < r_idx:
            mid_idx = (l_idx + r_idx) // 2
            if nums[mid_idx] < target:
                l_idx = mid_idx + 1
            else:
                r_idx = mid_idx
        if nums[l_idx] != target: return -1, -1
        left = l_idx
        l_idx, r_idx = left, n - 1
        while l_idx < r_idx:
            mid_idx = (l_idx + r_idx) // 2 + 1
            if nums[mid_idx] == target:
                l_idx = mid_idx
            else:
                r_idx = mid_idx - 1
        right = l_idx
        return left, right