# Given a non-empty array containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.

# Note:
# Each of the array element will not exceed 100.
# The array size will not exceed 200.
 
# Example 1:
# Input: [1, 5, 11, 5]
# Output: true
# Explanation: The array can be partitioned as [1, 5, 5] and [11].
 
# Example 2:
# Input: [1, 2, 3, 5]
# Output: false
# Explanation: The array cannot be partitioned into equal sum subsets.

class Solution:
    def canPartition(self, nums: List[int]) -> bool:
        total_sum = sum(nums)
        if total_sum % 2 == 1:
            return False
        else:
            equal_sum = total_sum / 2
            
        sum_diff = set()
        for num in nums:
            if num == equal_sum or num in sum_diff:
                return True
            else:
                for diff in list(sum_diff):
                    sum_diff.add(diff - num)
                sum_diff.add(equal_sum - num)
        return False
