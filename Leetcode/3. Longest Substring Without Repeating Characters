# Given a string, find the length of the longest substring without repeating characters.

# Example 1:

# Input: "abcabcbb"
# Output: 3 
# Explanation: The answer is "abc", with the length of 3. 
# Example 2:

# Input: "bbbbb"
# Output: 1
# Explanation: The answer is "b", with the length of 1.
# Example 3:

# Input: "pwwkew"
# Output: 3
# Explanation: The answer is "wke", with the length of 3. 
# Note that the answer must be a substring, "pwke" is a subsequence and not a substring.

# @param {String} s
# @return {Integer}
def length_of_longest_substring(s)
    start, max_len = 0, 0
    used_chars = {}
    
    s.split("").each_with_index do |ch, idx|
        if used_chars[ch] && start <= used_chars[ch]
            start = used_chars[ch] + 1
        end
        max_len = [max_len, idx - start + 1].max
        used_chars[ch] = idx
    end
    
    max_len
end

# Python solution:

class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        max_len, start = 0, 0
        seen = {}
        for idx, ch in enumerate(s):
            if ch in seen:
                max_len = max(max_len, idx - start)
                start = max(start, seen[ch] + 1)
            seen[ch] = idx
        return max(max_len, len(s) - start)
        