// Given a collection of intervals, merge all overlapping intervals.

// Example 1:
// Input: [[1,3],[2,6],[8,10],[15,18]]
// Output: [[1,6],[8,10],[15,18]]
// Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].

// Example 2:
// Input: [[1,4],[4,5]]
// Output: [[1,5]]
// Explanation: Intervals [1,4] and [4,5] are considered overlapping.

/**
 * Definition for an interval.
 * function Interval(start, end) {
 *     this.start = start;
 *     this.end = end;
 * }
 */
/**
 * @param {Interval[]} intervals
 * @return {Interval[]}
 */
const merge = function (intervals) {
  if (intervals.length <= 1) return intervals;

  const merged = [];
  const sorted = intervals.sort((a, b) => a.start - b.start);
  let curr = new Interval(sorted[0].start, sorted[0].end);

  for (let i = 1; i < sorted.length; i++) {
    if (curr.end >= sorted[i].start) {
      curr.end >= sorted[i].end ? curr : curr.end = sorted[i].end;
    } else {
      merged.push(curr);
      curr = new Interval(sorted[i].start, sorted[i].end);
    }
    if (i === sorted.length - 1) {
      merged.push(curr);
    }
  }

  return merged;
};

// Time: O(N), Space(1)
