// Given a binary tree, find the leftmost value in the last row of the tree.

// Example 1:
// Input:

//     2
//    / \
//   1   3

// Output:
// 1
// Example 2:
// Input:

//         1
//        / \
//       2   3
//      /   / \
//     4   5   6
//        /
//       7

// Output:
// 7
// Note: You may assume the tree (i.e., the given root node) is not NULL.

/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number}
 */
const findBottomLeftValue = function (root) {
  const temp = {
    level: 1,
    val: root.val,
  };
  return helper(root, 1, temp);
};

// eslint-disable-next-line func-names
const helper = function (root, level, temp) {
  if (temp.level < level) {
    temp.level = level;
    temp.val = root.val;
  }
  if (root.left) helper(root.left, level + 1, temp);
  if (root.right) helper(root.right, level + 1, temp);

  return temp.val;
};
