# You are given a map in form of a two-dimensional integer grid where 1 represents land and 0 represents water.
# Grid cells are connected horizontally/vertically (not diagonally). The grid is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells).
# The island doesn't have "lakes" (water inside that isn't connected to the water around the island). One cell is a square with side length 1. The grid is rectangular, width and height don't exceed 100. Determine the perimeter of the island.

# Example:

# Input:
# [[0,1,0,0],
#  [1,1,1,0],
#  [0,1,0,0],
#  [1,1,0,0]]

# Output: 16

# @param {Integer[][]} grid
# @return {Integer}
def island_perimeter(grid)
    land = 0
    neighbors = 0
    grid.each_with_index do |row, i|
        row.each_with_index do |num, j|
            if num == 1
                land += 1
                neighbors += check_surrounding(grid, [i, j])
            end
        end
    end
    
    (land * 4) - neighbors
end

def check_surrounding(grid, pos)
    moves = [[0, -1], [0, 1], [1, 0], [-1, 0]]
    surrounding = 0
    
    moves.each do |move|
        x = move[0] + pos[0]
        y = move[1] + pos[1]
        if x >= 0 && x < grid.length && y >= 0 && y < grid.first.length
            surrounding += 1 if grid[x][y] == 1
        end
    end
    
    surrounding 
end
