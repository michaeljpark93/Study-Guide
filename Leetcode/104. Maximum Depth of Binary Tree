# Given a binary tree, find its maximum depth.

# The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.

# Note: A leaf is a node with no children.

# Example:

# Given binary tree [3,9,20,null,null,15,7],

#     3
#    / \
#   9  20
#     /  \
#    15   7
# return its depth = 3.

# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end

# @param {TreeNode} root
# @return {Integer}
# Recursive solution: Time = O(N)
def max_depth(root)
    return 0 if root.nil?
    1 + [max_depth(root.left), max_depth(root.right)].max
end

# Iterative solution: Time = O(N)
def max_depth(root)
    return 0 if root.nil?
    depth = 0
    queue = [root]
    until queue.empty?
        depth += 1
        width = queue.length
        while width > 0
            node = queue.shift
            queue.push(node.left) if node.left
            queue.push(node.right) if node.right
            width -= 1
        end
    end
    
    depth
end