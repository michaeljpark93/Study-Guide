# Given a binary tree, find its maximum depth.

# The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.

# Note: A leaf is a node with no children.

# Example:

# Given binary tree [3,9,20,null,null,15,7],

#     3
#    / \
#   9  20
#     /  \
#    15   7
# return its depth = 3.

# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end

# @param {TreeNode} root
# @return {Integer}
# Recursive solution: Time = O(N)
def max_depth(root)
    return 0 if root.nil?
    1 + [max_depth(root.left), max_depth(root.right)].max
end

# Iterative solution: Time = O(N)
def max_depth(root)
    return 0 if root.nil?
    depth = 0
    queue = [root]
    until queue.empty?
        depth += 1
        width = queue.length
        while width > 0
            node = queue.shift
            queue.push(node.left) if node.left
            queue.push(node.right) if node.right
            width -= 1
        end
    end
    
    depth
end


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

from collections import deque

class Solution:
    # Python Recursive Solution:
    def maxDepth(self, root: TreeNode) -> int:
        if not root:
            return 0
        left = self.maxDepth(root.left)
        right = self.maxDepth(root.right)
        return 1 + max(left, right)
    
    # Python Iterative Solution:
    def maxDepth(self, root: TreeNode) -> int:
        if not root:
            return 0
        depth = 0
        queue = deque()
        queue.append(root)
        while queue:
            depth += 1
            count = len(queue)
            while count > 0:
                curr = queue.popleft()
                if curr.left:
                    queue.append(curr.left)
                if curr.right:
                    queue.append(curr.right)
                count -= 1
        return depth