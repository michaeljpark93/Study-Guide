// In a given grid, each cell can have one of three values:
// the value 0 representing an empty cell;
// the value 1 representing a fresh orange;
// the value 2 representing a rotten orange.
// Every minute, any fresh orange that is adjacent (4-directionally) to a rotten orange becomes rotten.
// Return the minimum number of minutes that must elapse until no cell has a fresh orange.  If this is impossible, return -1 instead.

// Example 1:
// Input: [[2,1,1],[1,1,0],[0,1,1]]
// Output: 4

// Example 2:
// Input: [[2,1,1],[0,1,1],[1,0,1]]
// Output: -1
// Explanation:  The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.

// Example 3:
// Input: [[0,2]]
// Output: 0
// Explanation:  Since there are already no fresh oranges at minute 0, the answer is just 0.

// Note:
// 1 <= grid.length <= 10
// 1 <= grid[0].length <= 10
// grid[i][j] is only 0, 1, or 2.

/**
 * @param {number[][]} grid
 * @return {number}
 */
const orangesRotting = function (grid) {
  let time = 0;
  let visited = 0;
  const queue = [];
  const [ROW, COL] = [grid.length, grid[0].length];
  const dirs = [[-1, 0], [0, 1], [1, 0], [0, -1]];
  const isValid = (row, col) => (row >= 0 && row < ROW && col >= 0 && col < COL);

  for (let r = 0; r < ROW; r += 1) {
    for (let c = 0; c < COL; c += 1) {
      if (grid[r][c] === 2) {
        queue.push([r, c]);
      }
      if (grid[r][c] === 0) {
        visited += 1;
      }
    }
  }

  // Queue contains already rotten oranges so remove time to rot
  if (queue.length) time -= 1;

  const dfs = function (oranges) {
    if (!oranges.length) return;
    const newQueue = [];
    time += 1;
    while (oranges.length) {
      const curr = oranges.shift();
      visited += 1;
      dirs.forEach((dir) => {
        const [x, y] = [curr[0] + dir[0], curr[1] + dir[1]];
        if (isValid(x, y) && grid[x][y] === 1) {
          grid[x][y] = 2;
          newQueue.push([x, y]);
        }
      });
    }
    dfs(newQueue);
  };

  dfs(queue);
  if (visited !== ROW * COL) return -1;
  return time;
};
