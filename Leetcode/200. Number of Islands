// Given a 2d grid map of '1's (land) and '0's (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

// Example 1:
// Input:
// 11110
// 11010
// 11000
// 00000
// Output: 1

// Example 2:
// Input:
// 11000
// 11000
// 00100
// 00011
// Output: 3

/**
 * @param {character[][]} grid
 * @return {number}
 */
const numIslands = function (grid) {
  let count = 0;

  grid.forEach((row, idx) => {
    row.forEach((num, i) => {
      if (num === '1') {
        count += 1;
        convertZeros(idx, i);
      }
    });
  });

  return count;

  function convertZeros(row, col) {
    if (row < 0 || col < 0 || row >= grid.length || col >= grid[0].length) return;
    if (grid[row][col] === '1') {
      grid[row][col] = 0;
      convertZeros(row, col + 1);
      convertZeros(row, col - 1);
      convertZeros(row + 1, col);
      convertZeros(row - 1, col);
    }
  }
};

# Python Solution
class Solution:
    def checkSurroundings(self, grid, pos):
        dirs = ((-1, 0), (0, 1), (1, 0), (0, -1))
        for dir in dirs:
            x = dir[0] + pos[0]
            y = dir[1] + pos[1]
            if x >= 0 and x < len(grid) and y >= 0 and y < len(grid[0]) and grid[x][y] == '1':
                grid[x][y] = '0'
                self.checkSurroundings(grid, (x, y))
        return grid
        
            
        
    def numIslands(self, grid: List[List[str]]) -> int:
        islands = 0
        for r_idx, row in enumerate(grid):
            for c_idx, space in enumerate(row):
                if space == '1':
                    islands += 1
                    grid = self.checkSurroundings(grid, (r_idx, c_idx))
        return islands