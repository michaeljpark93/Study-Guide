// Given an array of integers A sorted in non-decreasing order, return an array of the squares of each number, also in sorted non-decreasing order.

// Example 1:
// Input: [-4,-1,0,3,10]
// Output: [0,1,9,16,100]

// Example 2:
// Input: [-7,-3,2,3,11]
// Output: [4,9,9,49,121]

// Note:
// 1 <= A.length <= 10000
// -10000 <= A[i] <= 10000
// A is sorted in non-decreasing order.

/**
 * @param {number[]} A
 * @return {number[]}
 */
// two pointer method: Time: O(n), Space: O(n)
const sortedSquares = function (A) {
  let lo = 0;
  while (A[lo] < 0) {
    lo += 1;
  }
  let hi = lo;
  lo -= 1;
  const result = [];

  while (lo >= 0 || hi < A.length) {
    if (Math.abs(A[lo]) > A[hi] || lo < 0) {
      result.push(A[hi] * A[hi]);
      hi += 1;
    } else {
      result.push(A[lo] * A[lo]);
      lo -= 1;
    }
  }

  return result;
}


// square then sort solution: Time: O(nlogn), Space: O(n)
const sortedSquares = function (A) {
  const result = A.map(num => num * num);
  return result.sort((a, b) => a - b);
};