# Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:
# Integers in each row are sorted in ascending from left to right.
# Integers in each column are sorted in ascending from top to bottom.

# Example:
# Consider the following matrix:
# [
#   [1,   4,  7, 11, 15],
#   [2,   5,  8, 12, 19],
#   [3,   6,  9, 16, 22],
#   [10, 13, 14, 17, 24],
#   [18, 21, 23, 26, 30]
# ]
# Given target = 5, return true.
# Given target = 20, return false.

class Solution:
    def searchMatrix(self, matrix, target):
        """
        :type matrix: List[List[int]]
        :type target: int
        :rtype: bool
        """
        if len(matrix) == 0: return False
        for row in matrix:
            if len(row) == 0:
                break
            if row[0] <= target and row[-1] >= target:
                if target in row: return True
        
        return False


// JavaScript Solution:
var searchMatrix = function(matrix, target) {
    for (let row = 0; row < matrix.length; row += 1) {
        if (target >= matrix[row][0] && target <= matrix[row][matrix[0].length - 1]) {
            if (matrix[row].includes(target)) return true;
        }
    }
    return false;
};