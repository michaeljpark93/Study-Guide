# Reverse a singly linked list.

# Example:

# Input: 1->2->3->4->5->NULL
# Output: 5->4->3->2->1->NULL
# Follow up:

# A linked list can be reversed either iteratively or recursively. Could you implement both?

# Definition for singly-linked list.
# class ListNode
#     attr_accessor :val, :next
#     def initialize(val)
#         @val = val
#         @next = nil
#     end
# end

# @param {ListNode} head
# @return {ListNode}

# Recursive solution
# Time O(n), Space O(1)
def reverse_list(head)
    helper(head, nil)
end

def helper(head, prev_node)
    return prev_node if head.nil?
    new_head = head.next
    head.next = prev_node
    helper(new_head, head)
end

# Iterative Solution
# Time O(n), Space O(1)
def reverse_list(head)
    prev = nil
    curr = head
    until curr.nil?
        next_temp = curr.next
        curr.next = prev
        prev = curr
        curr = next_temp
    end
    prev
end

// JavaScript iterative solution:
var reverseList = function(head) {
    if (!head) return head;
    let prev = null;
    while (head) {
        let next = head.next;
        head.next = prev;
        prev = head;
        head = next;
    }
    return prev;
};

// Javascript recursive solution:
const reverseList = function(head) {
    if (!head || !head.next) {
        console.log(head)
        return head;
    }
    var newHead = reverseList(head.next);
    head.next.next = head;
    head.next = null;
    return newHead;
}
