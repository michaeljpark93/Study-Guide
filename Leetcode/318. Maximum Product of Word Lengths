// Given a string array words, find the maximum value of length(word[i]) * length(word[j]) where the two words do not share common letters. You may assume that each word will contain only lower case letters. If no such two words exist, return 0.

// Example 1:
// Input: ["abcw","baz","foo","bar","xtfn","abcdef"]
// Output: 16
// Explanation: The two words can be "abcw", "xtfn".

// Example 2:
// Input: ["a","ab","abc","d","cd","bcd","abcd"]
// Output: 4
// Explanation: The two words can be "ab", "cd".

// Example 3:
// Input: ["a","aa","aaa","aaaa"]
// Output: 0
// Explanation: No such pair of words.

/**
 * @param {string[]} words
 * @return {number}
 */
const maxProduct = function (words) {
  words.sort((a, b) => b.length - a.length);

  let max = 0;

  for (let i = 0; i < words.length; i++) {
    const letters = new Set();
    for (let j = 0; j < words[i].length; j++) {
      letters.add(words[i][j]);
    }

    let curr = i;
    while (curr < words.length) {
      for (let j = 0; j < words[curr].length; j++) {
        if (letters.has(words[curr][j])) {
          break;
        } else if (j === words[curr].length - 1) {
          const len = words[curr].length * words[i].length;
          len > max ? max = len : max;
        }
      }
      curr += 1;
    }
  }

  return max;
};
