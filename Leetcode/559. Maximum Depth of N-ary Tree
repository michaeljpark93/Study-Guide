// Given a n-ary tree, find its maximum depth.
// The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.

// For example, given a 3-ary tree:
// We should return its max depth, which is 3.

// Note:
// The depth of the tree is at most 1000.
// The total number of nodes is at most 5000.

/**
 * // Definition for a Node.
 * function Node(val,children) {
 *    this.val = val;
 *    this.children = children;
 * };
 */
/**
 * @param {Node} root
 * @return {number}
 */
const maxDepth = function (root) {
  if (!root) return 0;
  const queue = [root];
  let depth = 0;

  while (queue.length) {
    const queueLength = queue.length;
    for (let i = 0; i < queueLength; i += 1) {
      const currNode = queue.shift();
      if (currNode.children.length) {
        currNode.children.forEach(child => queue.push(child));
      }
    }

    depth += 1;
  }

  return depth;
};
