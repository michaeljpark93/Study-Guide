// Given a directed, acyclic graph of N nodes.  Find all possible paths from node 0 to node N-1, and return them in any order.

// The graph is given as follows:  the nodes are 0, 1, ..., graph.length - 1.  graph[i] is a list of all nodes j for which the edge (i, j) exists.

// Example:
// Input: [[1,2], [3], [3], []]
// Output: [[0,1,3],[0,2,3]]
// Explanation: The graph looks like this:
// 0--->1
// |    |
// v    v
// 2--->3
// There are two paths: 0 -> 1 -> 3 and 0 -> 2 -> 3.
// Note:

// The number of nodes in the graph will be in the range [2, 15].
// You can print different paths in any order, but you should keep the order of nodes inside one path.

/**
 * @param {number[][]} graph
 * @return {number[][]}
 */
const allPathsSourceTarget = function (graph) {
  queue = [];
  answer = [];

  graph[0].map((num) => {
    if (num === graph.length - 1) {
      answer.push([0, num]);
    } else {
      queue.push([0, num]);
    }
  });

  while (queue.length > 0) {
    const curr = queue.shift();
    const next = graph[curr[curr.length - 1]];
    if (next.length > 0) {
      for (let i = 0; i < next.length; i++) {
        const temp = curr.slice(0);
        temp.push(next[i]);
        if (next[i] === graph.length - 1) {
          answer.push(temp);
        } else {
          queue.push(temp);
        }
      }
    }
  }

  return answer;
};
