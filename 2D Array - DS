# Given a  2D Array, :

# 1 1 1 0 0 0
# 0 1 0 0 0 0
# 1 1 1 0 0 0
# 0 0 0 0 0 0
# 0 0 0 0 0 0
# 0 0 0 0 0 0
# We define an hourglass in  to be a subset of values with indices falling in this pattern in 's graphical representation:

# a b c
#   d
# e f g
# There are  hourglasses in , and an hourglass sum is the sum of an hourglass' values. Calculate the hourglass sum for every hourglass in , then print the maximum hourglass sum.

# For example, given the 2D array:

# -9 -9 -9  1 1 1 
#  0 -9  0  4 3 2
# -9 -9 -9  1 2 3
#  0  0  8  6 6 0
#  0  0  0 -2 0 0
#  0  0  1  2 4 0
# We calculate the following  hourglass values:

# -63, -34, -9, 12, 
# -10, 0, 28, 23, 
# -27, -11, -2, 10, 
# 9, 17, 25, 18
# Our highest hourglass value is  from the hourglass:

# 0 4 3
#   1
# 8 6 6

#!/bin/ruby

require 'json'
require 'stringio'

# Complete the hourglassSum function below.
def hourglassSum(arr)
    max_sum = hourglasshelper(arr, 1, 1)
    (1...arr.length - 1).each do |row|
        (1...arr.first.length - 1).each do |col|
            curr = hourglasshelper(arr, row, col)
            max_sum = curr if curr > max_sum
        end
    end

    max_sum
end

def hourglasshelper(arr, row, col)
    top = arr[row - 1][col - 1..col + 1].reduce(:+)
    bot = arr[row+ 1][col - 1..col + 1].reduce(:+)
    arr[row][col] + top + bot
end


fptr = File.open(ENV['OUTPUT_PATH'], 'w')

arr = Array.new(6)

6.times do |i|
    arr[i] = gets.rstrip.split(' ').map(&:to_i)
end

result = hourglassSum arr

fptr.write result
fptr.write "\n"

fptr.close()
