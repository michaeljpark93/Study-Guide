// Given a set of candidate numbers (candidates) (without duplicates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.

// The same repeated number may be chosen from candidates unlimited number of times.

// Note:

// All numbers (including target) will be positive integers.
// The solution set must not contain duplicate combinations.
// Example 1:

// Input: candidates = [2,3,6,7], target = 7,
// A solution set is:
// [
//   [7],
//   [2,2,3]
// ]
// Example 2:

// Input: candidates = [2,3,5], target = 8,
// A solution set is:
// [
//   [2,2,2,2],
//   [2,3,3],
//   [3,5]
// ]

/**
 * @param {number[]} candidates
 * @param {number} target
 * @return {number[][]}
 */
let combinationSum = function (candidates, target) {
  const answer = [];
  const temp = [];
  helper(candidates.sort(), target, 0, temp, answer);
  return answer;
};

const helper = function (list, target, start, temp, answer) {
  if (target < 0) return;
  if (target === 0) {
    answer.push(temp.slice(0));
  } else {
    for (let i = start; i < list.length; i++) {
      temp.push(list[i]);
      helper(list, target - list[i], i, temp, answer);
      temp.pop();
    }
  }
};

// Backtracking solution:
// Time: O(candidates ^ (target / minimum candidate))
