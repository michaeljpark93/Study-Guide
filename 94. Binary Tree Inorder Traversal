// Given a binary tree, return the inorder traversal of its nodes' values.

// Example:

// Input: [1,null,2,3]
//    1
//     \
//      2
//     /
//    3

// Output: [1,3,2]
// Follow up: Recursive solution is trivial, could you do it iteratively?

/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number[]}
 */

// Iterative(stack)
var inorderTraversal = function (root) {
  const answer = [];
  if (!root) return answer;

  const nodes = [root];
  let currNode = root.left;

  while (currNode || nodes.length) {
    while (currNode) {
      nodes.unshift(currNode);
      currNode = currNode.left;
    }

    currNode = nodes.shift();
    answer.push(currNode.val);
    currNode = currNode.right;
  }

  return answer;
};

// // Recursive
var inorderTraversal = function (root) {
  if (!root) return [];
  return [...inorderTraversal(root.left), root.val, ...inorderTraversal(root.right)];
};
