# Given a string, find the length of the longest substring without repeating characters.

# Example 1:

# Input: "abcabcbb"
# Output: 3 
# Explanation: The answer is "abc", with the length of 3. 
# Example 2:

# Input: "bbbbb"
# Output: 1
# Explanation: The answer is "b", with the length of 1.
# Example 3:

# Input: "pwwkew"
# Output: 3
# Explanation: The answer is "wke", with the length of 3. 
# Note that the answer must be a substring, "pwke" is a subsequence and not a substring.

# @param {String} s
# @return {Integer}
def length_of_longest_substring(s)
    start, max_len = 0, 0
    used_chars = {}
    
    s.split("").each_with_index do |ch, idx|
        if used_chars[ch] && start <= used_chars[ch]
            start = used_chars[ch] + 1
        else
            max_len = [max_len, idx - start + 1].max
        end
        used_chars[ch] = idx
    end
    
    max_len
end
